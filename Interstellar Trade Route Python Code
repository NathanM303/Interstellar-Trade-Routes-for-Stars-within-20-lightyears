# -*- coding: utf-8 -*-
"""
A code to sort data from Gaia DR3 and manually inputted star data from Wiki's
list of nearest stars, filter them based on Binary Distance, create a network
graph and shortest path distance graph to a target star ID, giving analysis
of these ooutputs as well.

@author: Nathan Murray
"""

import numpy as np
from astropy.io import fits
from astropy import units as u
from astropy.coordinates import SkyCoord
import csv
import matplotlib.pyplot as plt
import networkx as nx

"""PART 1: ADDING & PROCESSING DATA"""

#Loading in FITZ data
hdul = fits.open('999999 GNCS data.fit')
data = hdul[1].data
cols = hdul[1].columns
hdul.close()

star_id = data['GaiaEDR3']
dist50_data = data['Dist50'] * 1000

binary_separation_distance = float(input("What is your binary star separation\
distance (in parsecs)? Recommended is 0.07 (based on Alpha Centuri): "))

# Filtering function for stars within 6.44 parsecs
def data_filter(dist50_data):
    filtered_row_indices = []
    filtered_distance_data = []

    for index, distance in enumerate(dist50_data):
        if distance < 6.44:
            filtered_row_indices.append(index)
            filtered_distance_data.append(distance)

    return filtered_row_indices, filtered_distance_data

filtered_row_indices, filtered_distances = data_filter(dist50_data)

filtered_data_ra = data['RA_ICRS'][filtered_row_indices]
filtered_data_dec = data['DE_ICRS'][filtered_row_indices]

#Calculate Cartesian Coordinates
coords = SkyCoord(
    ra=filtered_data_ra * u.deg,
    dec=filtered_data_dec * u.deg,
    distance=filtered_distances * u.pc,
    frame='icrs')

filtered_data_xcoords = coords.cartesian.x.value
filtered_data_ycoords = coords.cartesian.y.value
filtered_data_zcoords = coords.cartesian.z.value

"""Checking: With a CSV file"""
filtered_data = np.column_stack((filtered_row_indices, filtered_distances, 
                                  filtered_data_xcoords, filtered_data_ycoords, 
                                  filtered_data_zcoords))
sorted_filtered_data = filtered_data[np.argsort(filtered_data[:, 1])]

output_file_name = "sorted_filtered_GAIA_star_data.csv"
with open(output_file_name, mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Row Index", "Distance", "X Coordinate", "Y Coordinate", "Z Coordinate"])
    writer.writerows(sorted_filtered_data)
file.close()
print(f"Filtered and sorted Gaia data written to {output_file_name}")
"""Check Complete"""

# Manually adding stars
additional_stars = [
    (404001, "14h29m43.0s", "-62d40m46s", 4.2465),  # Proxima Centauri (Alpha Centauri System)
    (404002, "17h57m48.5s", "+04d41m36s", 5.9629),  # Barnard's Star
    (404003, "10h49m18.9s", "-53d19m10s", 6.5029),  # Luhman 16 A
    (404004, "10h56m29.2s", "+07d00m53s", 7.8558),  # Wolf 359
    (404005, "11h03m20.2s", "+35d58m12s", 8.3044),  # Lalande 21185
    (404006, "06h45m08.9s", "-16d42m58s", 8.7094),  # Sirius A
    (404007, "01h39m01.3s", "-17d57m01s", 8.7240),  # Gliese 65 A
    (404008, "18h49m49.4s", "-23d50m10s", 9.7063),  # Ross 154
    (404009, "23h41m54.7s", "+44d10m30s", 10.3057),  # Ross 248
    (404010, "03h32m55.8s", "-09d27m30s", 10.4749),  # Epsilon Eridani
    (404011, "23h05m52.0s", "-35d51m11s", 10.7241),  # Lacaille 9352
    (404012, "11h47m44.4s", "+00d48m16s", 11.0074),  # Ross 128
    (404013, "22h38m33.4s", "-15d17m57s", 11.109),   # EZ Aquarii A
    (404014, "07h39m18.1s", "+05d13m30s", 11.402),   # Procyon A
    (404015, "21h06m53.9s", "+38d44m58s", 11.4039),  # 61 Cygni A
    (404016, "18h42m46.7s", "+59d37m49s", 11.4908),  # Struve 2398 A
    (404017, "00h18m22.9s", "+44d01m23s", 11.6191),  # Groombridge 34 A
    (404018, "08h29m49.5s", "+26d46m37s", 11.6797),  # DX Cancri
    (404019, "22h03m21.7s", "-56d47m10s", 11.8670),  # Epsilon Indi A
    (404020, "01h44m04.1s", "-15d56m15s", 11.9118),  # Tau Ceti
    (404021, "03h35m59.7s", "-44d30m45s", 11.9839),  # GJ 1061
    (404022, "01h12m30.6s", "-16d59m56s", 12.1222),  # YZ Ceti
    (404023, "07h27m24.5s", "+05d13m33s", 12.3485),  # Luyten's Star
    (404024, "02h53m00.9s", "+16d52m53s", 12.4970),  # Teegarden's Star
    (404025, "05h11m40.6s", "-45d01m06s", 12.8308),  # Kapteyn's Star
    (404026, "21h17m15.3s", "-38d52m03s", 12.9472),  # Lacaille 8760
    (404027, "18h45m05.3s", "-63d57m48s", 13.0638),  # SCR 1845-6357 A
    (404028, "22h27m59.5s", "+57d41m45s", 13.0724),  # Kruger 60 A
    (404029, "10h48m14.7s", "-39d56m06s", 13.1932),  # DENIS J1048-3956
    (404030, "06h29m23.4s", "-02d48m50s", 13.3630),  # Ross 614 A
    (404031, "16h30m18.1s", "-12d39m45s", 14.0500),  # Wolf 1061
    (404032, "00h49m09.9s", "+05d23m19s", 14.0718),  # Van Maanen's Star
    (404033, "00h05m24.4s", "-37d21m27s", 14.1747),  # Gliese 1
    (404034, "02h00m13.2s", "+13d03m08s", 14.5780),  # TZ Arietis
    (404035, "12h33m17.2s", "+09d01m15s", 14.5950),  # Wolf 424 A
    (404036, "17h36m25.9s", "+68d20m21s", 14.8395),  # Gliese 687
    (404037, "17h28m39.9s", "-46d53m43s", 14.8492),  # Gliese 674
    (404038, "10h48m12.6s", "-11d20m14s", 14.8706),  # LHS 292
    (404039, "11h45m42.9s", "-64d50m29s", 15.1226),  # Gliese 440
    (404040, "19h53m54.2s", "+44d24m55s", 15.2001),  # GJ 1245 A
    (404041, "22h53m16.7s", "-14d15m49s", 15.2382),  # Gliese 876
    (404042, "10h44m21.2s", "-61d12m36s", 15.7586),  # LHS 288
    (404043, "00h06m43.8s", "-07d32m22s", 15.8060),  # GJ 1002
    (404044, "10h11m22.1s", "+49d27m15s", 15.8857),  # Groombridge 1618
    (404045, "11h05m28.6s", "+43d31m36s", 15.9969),  # Gliese 412 A
    (404046, "10h19m36.4s", "+19d52m10s", 16.1939),  # AD Leonis
    (404047, "21h33m34.0s", "-49d00m32s", 16.2005),  # Gliese 832
    (404048, "17h37m03.7s", "-44d19m09s", 16.3328),  # Gliese 682
    (404049, "04h15m16.3s", "-07d39m10s", 16.3330),  # Keid A (40 Eridani)
    (404050, "22h46m49.7s", "+44d20m02s", 16.4761),  # EV Lacertae
    (404051, "18h05m27.4s", "+02d29m59s", 16.7074),  # 70 Ophiuchi A
    (404052, "19h50m47.0s", "+08d52m06s", 16.7300),  # Altair
    (404053, "08h58m15.2s", "+19d45m47s", 16.8000),  # EI Cancri
    (404054, "06h00m03.5s", "+02d42m24s", 16.9861),  # GJ 3379
    (404055, "11h47m41.4s", "+78d41m28s", 17.1368),  # Gliese 445
    (404056, "05h01m57.4s", "-06d56m46s", 17.5309),  # GJ 3323
    (404057, "13h45m43.8s", "+14d53m29s", 17.7263),  # Gliese 526
    (404058, "04h31m11.5s", "+58d58m37s", 17.9925),  # Stein 2051 A
    (404059, "06h54m49.0s", "+33d16m05s", 18.2146),  # Gliese 251
    (404060, "20h52m33.0s", "-16d58m29s", 18.3305),  # LP 816-60
    (404061, "18h35m37.9s", "+32d59m55s", 18.5534),  # LSR J1835+3259
    (404062, "05h31m27.4s", "-03d40m38s", 18.6042),  # Gliese 205
    (404063, "06h10m34.6s", "-21d51m53s", 18.7906),  # Gliese 229 A
    (404064, "19h32m21.6s", "+69d39m40s", 18.7993),  # Sigma Draconis
    (404065, "05h42m09.3s", "+12d29m21s", 18.8883),  # Ross 47
    (404066, "14h57m28.0s", "-21d24m56s", 19.1987),  # Gliese 570 A
    (404067, "17h46m32.4s", "-57d19m09s", 19.2078),  # Gliese 693
    (404068, "19h20m48.0s", "-45d33m30s", 19.2724),  # Gliese 754
    (404069, "23h49m12.5s", "+02d24m04s", 19.2745),  # Gliese 908
    (404070, "19h16m55.3s", "+05d10m08s", 19.2922),  # Gliese 752 A
    (404071, "15h32m12.9s", "-41d16m32s", 19.2996),  # Gliese 588
    (404072, "00h49m06.3s", "+57d48m55s", 19.3314),  # Achird (Eta Cassiopeiae A)
    (404073, "17h15m20.9s", "-26d36m09s", 19.4185),  # 36 Ophiuchi A
    (404074, "07h44m40.2s", "+03d33m09s", 19.5330),  # YZ Canis Minoris
    (404075, "00h15m28.1s", "-16d08m02s", 19.577),   # GJ 1005 A
    (404076, "20h11m11.93s", "-36d06m04s", 19.609),  # HR 7703 (Gliese 783)
    (404077, "03h19m55.7s", "-43d04m11s", 19.7045),  # 82 G. Eridani
    (404078, "07h10m01.8s", "+38d31m46s", 19.7414),  # Gliese 268
    (404079, "20h08m43.6s", "-66d10m55s", 19.893),   # Delta Pavonis
]

converted_stars = []
converted_stars.append((504, 0, 0, 0, 0))  # Add the Sun first
similarity_threshold = float(input("What is your similarity threshold between \
Wikipedia and Gaia star (in parsecs)? Recommended is 0.002 (based on emperical testing): "))

# Process additional stars
for star in additional_stars:
    star_id, ra_hms, dec_dms, distance_ly = star
    distance_pc = (distance_ly * u.lyr).to(u.pc).value
    coord = SkyCoord(ra=ra_hms, dec=dec_dms, distance=distance_pc * u.pc, frame='icrs')

    x = coord.cartesian.x.value
    y = coord.cartesian.y.value
    z = coord.cartesian.z.value

    # Check similarity with Gaia stars
    is_similar = False
    for ix, iy, iz in zip(filtered_data_xcoords, filtered_data_ycoords, filtered_data_zcoords):
        separation = np.sqrt((x - ix) ** 2 + (y - iy) ** 2 + (z - iz) ** 2)
        if separation < similarity_threshold:
            is_similar = True
            break

    if not is_similar:
        converted_stars.append((star_id, distance_pc, x, y, z))

"""Checking 2: With a CSV file"""
additional_array = np.array(converted_stars)
sorted_additional_array = additional_array[np.argsort(additional_array[:, 1])]

output_file_name_2 = "sorted_additional_star_data.csv"
with open(output_file_name_2, mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Star ID", "Distance", "X Coordinate", "Y Coordinate", "Z Coordinate"])
    writer.writerows(sorted_additional_array)
file.close()
print(f"Sorted additional star data written to {output_file_name_2}")
"""Check Complete"""

# Combine stars from both data sources
combined_stars = []
combined_stars.extend(converted_stars)  # Use "extend" to add individual tuples

for star_id, x, y, z, dist in zip(
    data['GaiaEDR3'][filtered_row_indices], 
    filtered_data_xcoords, 
    filtered_data_ycoords, 
    filtered_data_zcoords, 
    filtered_distances):
    combined_stars.append((star_id, dist, x, y, z))

"""Checking 3: With a CSV file"""
combined_array = np.array(combined_stars)
sorted_combined_array = combined_array[np.argsort(combined_array[:, 1])]

output_file_name_3 = "sorted_unfiltered_combined_star_data.csv"
with open(output_file_name_3, mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Star ID", "Distance (pc)", "X Coordinate", "Y Coordinate", "Z Coordinate"])
    writer.writerows(sorted_combined_array)
print(f"Unfiltered combined star data written to {output_file_name_3}")
"""Check Complete"""

"""PART 2: BINARY STAR FILTERING"""

def binary_separation_filter(stars, binary_separation_distance):
    """
    Filters stars based on binary separation distance.
    Retains one star from each binary pair.
    """
    final_stars = []
    n = len(stars)
    to_remove = set()

    for i in range(n):
        if i in to_remove:
            continue
        for j in range(i + 1, n):
            if j in to_remove:
                continue
            separation = np.sqrt(
                (stars[i][2] - stars[j][2]) ** 2 +
                (stars[i][3] - stars[j][3]) ** 2 +
                (stars[i][4] - stars[j][4]) ** 2
            )
            if separation < binary_separation_distance:
                to_remove.add(j)

    # Keep stars not marked for removal
    for i in range(n):
        if i not in to_remove:
            final_stars.append(stars[i])

    return final_stars


final_filtered_stars = binary_separation_filter(combined_stars, binary_separation_distance)

"""PART 3: FINAL STARS COLLECTED"""

final_star_ids = []
final_distances = []
final_xcoords = []
final_ycoords = []
final_zcoords = []

for star in final_filtered_stars:
    final_star_ids.append(star[0])
    final_distances.append(star[1])
    final_xcoords.append(star[2])
    final_ycoords.append(star[3])
    final_zcoords.append(star[4])

# Convert lists to arrays
final_star_ids = np.array(final_star_ids)
final_distances = np.array(final_distances)
final_xcoords = np.array(final_xcoords)
final_ycoords = np.array(final_ycoords)
final_zcoords = np.array(final_zcoords)

"""Checking 4: With a CSV file"""
final_array = np.column_stack((final_star_ids, final_distances, final_xcoords, final_ycoords, final_zcoords))
sorted_final_array = final_array[np.argsort(final_array[:, 1])]

output_file_name_4 = "sorted_final_star_data.csv"
with open(output_file_name_4, mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Star ID", "Distance", "X Coordinate", "Y Coordinate", "Z Coordinate"])
    writer.writerows(sorted_final_array)
file.close()
print(f"Final data written to {output_file_name_4}")
"""Check Complete"""

print(len(filtered_row_indices), 'stars from GAIA data after first filter\
 based on distances to Sun')
print(len(converted_stars), 'stars out of',len(additional_stars), 'from the \
Wiki Data (and Sun) added after comparing against the filtered GAIA stars')
print(len(final_star_ids), 'stars out of',len(filtered_row_indices)+len(converted_stars),\
'after second filter based on binary star distance')

"""PART 4: NETWORK ANALYSIS USING NETWORKX"""

threshold = float(input("Now let's get your interstellar trade route started! What would you like the hoplength to be (in parsecs)? "))
star_merged = np.column_stack((final_star_ids, final_xcoords, final_ycoords, final_zcoords))

def build_networkx_graph(star_merged, threshold):
    G = nx.Graph()
    for star in star_merged:
        G.add_node(int(star[0]), pos=(star[1], star[2]))

    num_stars = len(star_merged)
    for i in range(num_stars):
        id1, x1, y1, z1 = star_merged[i]
        pos1 = np.array([x1, y1, z1])
        for j in range(i + 1, num_stars):
            id2, x2, y2, z2 = star_merged[j]
            pos2 = np.array([x2, y2, z2])
            separation = np.linalg.norm(pos1 - pos2)
            if separation <= threshold:
                G.add_edge(int(id1), int(id2), weight=separation)
    return G

G = build_networkx_graph(star_merged, threshold)

def plot_networkx_graph(G, x_coords, y_coords, z_coords, sun_id=504):
    """
    Plots stars on a grid using their actual X and Y coordinates in parsecs, 
    with node sizes weighted by Z coordinate. Groups lone stars together if there are more than 10 networks.
    """

    # Create position dictionary for plotting
    pos = {node: (x, y) for node, x, y in zip(G.nodes, x_coords, y_coords)}

    # Define node sizes based on z-coordinates
    base_size = 20
    scaling_factor = 4
    node_sizes = [base_size + scaling_factor * z for z in z_coords]

    plt.figure(figsize=(12, 12), dpi=150)

    # Identify connected components
    connected_components = list(nx.connected_components(G))
    multi_star_networks = [comp for comp in connected_components if len(comp) > 1]
    lone_stars = [list(comp)[0] for comp in connected_components if len(comp) == 1]

    # Use original behavior if there are <= 10 networks
    if len(multi_star_networks) + len(lone_stars) <= 10:
        multi_star_color_map = plt.cm.get_cmap('spring', len(multi_star_networks))
        single_star_color_map = plt.cm.get_cmap('winter', len(lone_stars))

        # Plot multi-star networks
        for i, component in enumerate(multi_star_networks):
            nodes = list(component)
            color = multi_star_color_map(i)
            network_label = f"Network {i + 1}"
            sizes = [node_sizes[list(G.nodes).index(node)] for node in nodes]
            nx.draw_networkx_nodes(G, pos, nodelist=nodes, node_color=[color], node_size=sizes)
            plt.scatter([], [], color=color, label=network_label)

        # Plot lone stars
        for i, node in enumerate(lone_stars):
            color = single_star_color_map(i)
            node_label = f"Star {float(node):.4g}"
            size = node_sizes[list(G.nodes).index(node)]
            nx.draw_networkx_nodes(G, pos, nodelist=[node], node_color=[color], node_size=size)
            plt.scatter([], [], color=color, label=node_label)

    # Group lone stars if there are more than 10 networks
    else:
        if len(multi_star_networks) > 0:
            multi_star_color_map = plt.cm.get_cmap('spring', len(multi_star_networks))

            # Plot multi-star networks
            for i, component in enumerate(multi_star_networks):
                nodes = list(component)
                color = multi_star_color_map(i)
                network_label = f"Network {i + 1}"
                sizes = [node_sizes[list(G.nodes).index(node)] for node in nodes]
                nx.draw_networkx_nodes(G, pos, nodelist=nodes, node_color=[color], node_size=sizes)
                plt.scatter([], [], color=color, label=network_label)

        # Group lone stars together
        if len(lone_stars) > 0:
            lone_star_color = "blue"
            sizes = [node_sizes[list(G.nodes).index(node)] for node in lone_stars]
            nx.draw_networkx_nodes(G, pos, nodelist=lone_stars, node_color=lone_star_color, node_size=sizes)
            plt.scatter([], [], color=lone_star_color, label="Lone Stars")

    # Draw edges
    nx.draw_networkx_edges(G, pos, alpha=0.5, edge_color="gray")

    # Highlight Sun and Target
    if sun_id in G.nodes:
        sun_size = node_sizes[list(G.nodes).index(sun_id)]
        nx.draw_networkx_nodes(G, pos, nodelist=[sun_id], node_color="firebrick", node_size=sun_size)
        plt.scatter([], [], color="firebrick", label="Sun")
        sun_pos = pos[sun_id]
        plt.text(sun_pos[0], sun_pos[1] - 0.3, "Sun", ha='center', color='firebrick')

    # Set axis labels
    plt.xlabel("X (parsecs)")
    plt.ylabel("Y (parsecs)")
    plt.grid(True, linestyle='--', linewidth=0.5)

    # Add legend
    plt.legend(title="Networks and Lone Stars", loc="center left", bbox_to_anchor=(1.05, 0.5))
    plt.title("Star Network Map")
    plt.savefig('star_network_map.png', dpi=300, bbox_inches='tight')
    plt.show()


# Function to print the number of networks and the number of stars in each network

def print_network_info(G, sun_id=504):
    """
    Identifies Network 1 as the network containing the Sun (ID 504),
    prints the star IDs of all stars in Network 1.
    """
    # Find all connected components
    connected_components = list(nx.connected_components(G))
    
    # Identify the component containing the Sun
    sun_network = None
    for component in connected_components:
        if sun_id in component:
            sun_network = component
            break
    
    if sun_network is None:
        print("Error: The Sun is not in any connected network.")
        return

    lone_stars = [comp for comp in connected_components if len(comp) == 1]
    largest_network_size = max(len(comp) for comp in connected_components)
    
    # Treat the Sun's network as Network 1
    network_1_star_ids = sorted(list(sun_network))
    print(f"Number of networks: {len(connected_components)}")
    print(f"Number of lone stars: {len(lone_stars)}")
    print(f"Largest network contains {largest_network_size} stars")
    for i, component in enumerate(connected_components, start=1):
        print(f"Network {i}: {len(component)} stars")
    print("Star IDs in Network 1:", network_1_star_ids)
       
plot_networkx_graph(G, x_coords=final_xcoords, y_coords=final_ycoords, z_coords=final_zcoords, sun_id=504)
print_network_info(G)

"""PART 5: SHORTEST PATH"""

# Find the shortest path using Dijkstra's algorithm
def shortest_path_networkx(G, start_id, target_id):
    try:
        path = nx.shortest_path(G, source=start_id, target=target_id, weight='weight')
        distance = nx.shortest_path_length(G, source=start_id, target=target_id, weight='weight')
        return path, distance
    except nx.NetworkXNoPath:
        return None, float('inf')

target_id = int(input("Enter the Star ID to find the shortest distance from the Sun: "))
path, distance = shortest_path_networkx(G, 504, target_id)

def plot_shortest_path_graph(G, x_coords, y_coords, z_coords, path=None, sun_id=504, target_id=None):

    # Create position dictionary for plotting
    pos = {node: (x, y) for node, x, y in zip(G.nodes, x_coords, y_coords)}

    # Define node sizes based on z-coordinates
    base_size = 20
    scaling_factor = 4
    node_sizes = [base_size + scaling_factor * z for z in z_coords]

    plt.figure(figsize=(12, 12), dpi=150)

    # Identify connected components
    connected_components = list(nx.connected_components(G))
    multi_star_networks = [comp for comp in connected_components if len(comp) > 1]
    lone_stars = [list(comp)[0] for comp in connected_components if len(comp) == 1]

    # Use original behavior if there are <= 10 networks
    if len(multi_star_networks) + len(lone_stars) <= 10:
        multi_star_color_map = plt.cm.get_cmap('spring', len(multi_star_networks))
        single_star_color_map = plt.cm.get_cmap('winter', len(lone_stars))

        # Plot multi-star networks
        for i, component in enumerate(multi_star_networks):
            nodes = list(component)
            color = multi_star_color_map(i)
            network_label = f"Network {i + 1}"
            sizes = [node_sizes[list(G.nodes).index(node)] for node in nodes]
            nx.draw_networkx_nodes(G, pos, nodelist=nodes, node_color=[color], node_size=sizes)
            plt.scatter([], [], color=color, label=network_label)

        # Plot lone stars
        for i, node in enumerate(lone_stars):
            color = single_star_color_map(i)
            node_label = f"Star {float(node):.4g}"
            size = node_sizes[list(G.nodes).index(node)]
            nx.draw_networkx_nodes(G, pos, nodelist=[node], node_color=[color], node_size=size)
            plt.scatter([], [], color=color, label=node_label)

    # Group lone stars if there are more than 10 networks
    else:
        if len(multi_star_networks) > 0:
            multi_star_color_map = plt.cm.get_cmap('spring', len(multi_star_networks))

            # Plot multi-star networks
            for i, component in enumerate(multi_star_networks):
                nodes = list(component)
                color = multi_star_color_map(i)
                network_label = f"Network {i + 1}"
                sizes = [node_sizes[list(G.nodes).index(node)] for node in nodes]
                nx.draw_networkx_nodes(G, pos, nodelist=nodes, node_color=[color], node_size=sizes)
                plt.scatter([], [], color=color, label=network_label)

        # Group lone stars together
        if len(lone_stars) > 0:
            lone_star_color = "blue"
            sizes = [node_sizes[list(G.nodes).index(node)] for node in lone_stars]
            nx.draw_networkx_nodes(G, pos, nodelist=lone_stars, node_color=lone_star_color, node_size=sizes)
            plt.scatter([], [], color=lone_star_color, label="Lone Stars")

    # Draw edges
    nx.draw_networkx_edges(G, pos, alpha=0.5, edge_color="gray")

    # Highlight Sun and Target
    if sun_id in G.nodes:
        sun_size = node_sizes[list(G.nodes).index(sun_id)]
        nx.draw_networkx_nodes(G, pos, nodelist=[sun_id], node_color="firebrick", node_size=sun_size)
        plt.scatter([], [], color="firebrick", label="Sun")
        sun_pos = pos[sun_id]
        plt.text(sun_pos[0], sun_pos[1] - 0.3, "Sun", ha='center', color='firebrick')

    if target_id and target_id in G.nodes:
        target_size = node_sizes[list(G.nodes).index(target_id)]
        nx.draw_networkx_nodes(G, pos, nodelist=[target_id], node_color="lightcoral", node_size=target_size)
        plt.scatter([], [], color="lightcoral", label="Target Star")
        target_pos = pos[target_id]
        plt.text(target_pos[0], target_pos[1] - 0.3, "Target", ha='center', color='lightcoral')

    # Highlight path if provided
    if path:
        path_edges = list(zip(path, path[1:]))
        nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color="green", width=2.5)

    # Set axis labels
    plt.xlabel("X (parsecs)")
    plt.ylabel("Y (parsecs)")
    plt.grid(True, linestyle='--', linewidth=0.5)

    # Add legend
    plt.legend(title="Networks and Lone Stars", loc="center left", bbox_to_anchor=(1.05, 0.5))
    plt.title(f"Shortest Path Map for Hoplength {threshold} parsecs")
    plt.savefig('star_shortest_path_map.png', dpi=300, bbox_inches='tight')
    plt.show()

def print_shortest_path_info(G, path, target_id):
    if path:
        num_stops = len(path) - 2
        print(f"Shortest path from the Sun (ID 504) to Star ID {target_id}: {path}")
        print(f"Distance: {distance:.2f} parsecs")
        print(f"Stopping by {num_stops} stars along the way")
    else:
        print(f"No path found from the Sun (ID 504) to Star ID {target_id}")

        
plot_shortest_path_graph(G, x_coords=final_xcoords, y_coords=final_ycoords, z_coords=final_zcoords, path=path, sun_id=504, target_id=target_id)
print_shortest_path_info(G, path=path, target_id=target_id)
